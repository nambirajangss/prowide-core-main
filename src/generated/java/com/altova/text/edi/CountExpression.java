////////////////////////////////////////////////////////////////////////
//
// CountExpression.java
//
// This file was generated by MapForce 2025.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

import com.altova.text.ITextNode;
import java.util.function.Function;

public class CountExpression extends DataExpression {
	protected Function<String, Boolean> mNameFn;
	protected Function<String, Boolean> mNodeFn;
	
	public CountExpression(Function<String, Boolean> nameFn, Function<String, Boolean> nodeFn) {
		super(new DataExpression[]{});
		this.mNameFn = nameFn;
		this.mNodeFn = nodeFn;
	}

	public String evaluate(ITextNode node) {
		ITextNode rootNode = node;
		while (rootNode.getParent() != null && !mNodeFn.apply(rootNode.getName()))
			rootNode = rootNode.getParent();

		int c = 0;
		for (int i = 0; i < rootNode.getChildren().size(); ++i)
			c += count(rootNode.getChildren().getAt(i));

		return Integer.toString(c);
	}
	protected int count(ITextNode node) {
		int c = 0;
		if (mNameFn.apply(node.getName())) ++c;
		for (int i = 0; i < node.getChildren().size(); ++i)
			c += count(node.getChildren().getAt(i));
		return c;
	}
}
