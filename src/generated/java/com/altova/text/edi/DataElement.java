////////////////////////////////////////////////////////////////////////
//
// DataElement.java
//
// This file was generated by MapForce 2025.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

import com.altova.text.ITextNode;
import com.altova.text.edi.Scanner.State;

import java.io.IOException;

public class DataElement extends StructureItem {
	DataTypeValidator mValidator;

	public DataElement (String name, DataTypeValidator validator) {
		super(name, ITextNode.DataElement);
		mValidator = validator;
		mRule = null;
		mRules = null;
	}

	public DataElement (String name, DataTypeValidator validator, DataRule inlineRule) {
		super(name, ITextNode.DataElement);
		mValidator = validator;
		mRule = inlineRule;
		mRules = null;
	}

	public DataElement (String name, DataTypeValidator validator, DataRule inlineRule, DataRule[] rules) {
		super(name, ITextNode.DataElement);
		mValidator = validator;
		mRule = inlineRule;
		mRules = rules;
	}

	public boolean read (Parser.Context context) {
		ITextNode node;
		StringBuffer sError = new StringBuffer();
		State beforeState = context.getScanner().getCurrentState();
		if (context.getParser().getEDIKind() == EDISettings.EDIStandard.EDIFixed) {
			Scanner scanner = context.getScanner();
			StringBuffer sBuffer = new StringBuffer();
			while (sBuffer.length() < mValidator.getMaxLength() && !scanner.isAtEnd() &&
				scanner.getCurrentChar() != scanner.mServiceChars.getSegmentTerminator()) {
				char c = scanner.rawConsumeChar();
				if (scanner.getCurrentChar() == '\n') {
					if (c != '\r')
						sBuffer.append( c );
				} else
					sBuffer.append( c );
			}

			mValidator.makeValidOnRead( sBuffer, context, beforeState);
			if (sBuffer.length() == 0)
				return false; //data element is absent

			node = context.getGenerator().insertElement (context.getParticle().getName(), sBuffer.toString(), mNodeClass);
			
			sError.append(context.getValidator().validate(null, null, context.getParent().getParticle().getName(), context.getParticle().getName(), sBuffer.toString()));

			if (context.getParticle().getNode().getInlineRule() != null && context.getParticle().getNode().getInlineRule().getValidate()) {
				String sExpected = context.getParticle().getNode().getInlineRule().getExpression().evaluate(node);
				if (!mValidator.compare(sBuffer.toString(), sExpected)) {
					sError.append("Field does not contain expected value ('");
					sError.append(sBuffer.toString());
					sError.append("' instead of '");
					sError.append(sExpected);
					sError.append("').");
				}
			} else if (context.getParticle().getNode().getRules() != null) {
				for (DataRule rule : context.getParticle().getNode().getRules()) {
					if (rule.getValidate() && rule.getReference().matchesNodes(context.getGenerator().getPath())) {
						String sExpected = rule.getExpression().evaluate(node);
						if (!mValidator.compare(sBuffer.toString(), sExpected)) {
							sError.append("Field does not contain expected value ('");
							sError.append(sBuffer.toString());
							sError.append("' instead of '");
							sError.append(sExpected);
							sError.append("').");
						}
					}
				}
			}
			if (sError.length() > 0) {
				context.handleError(
					Parser.ErrorType.SemanticWrong,
					new ErrorPosition( beforeState ),
					sError.toString(),
					sBuffer.toString()
				);
			}
			
			return true;
		}

		//MSH-2 in HL7 MODE also needs special treatment
		if (context.getParser().getEDIKind() == EDISettings.EDIStandard.EDIHL7 
			&& isHL7SpecialField(context.getParticle().getName(), "-2")) {
			Scanner scanner = context.getScanner();
			String s = new String();
			char c = scanner.rawConsumeChar();
			scanner.mServiceChars.setComponentSeparator( c);
			s += c;
			s += c = scanner.rawConsumeChar();
			scanner.mServiceChars.setRepetitionSeparator( c);
			if (scanner.getCurrentChar() != scanner.mServiceChars.getDataElementSeparator()) {
				s += c = scanner.rawConsumeChar();
				scanner.mServiceChars.setReleaseCharacter( c);
			}
			if (scanner.getCurrentChar() != scanner.mServiceChars.getDataElementSeparator()) {
				s += c = scanner.rawConsumeChar();
				scanner.mServiceChars.setSubComponentSeparator( c);
			}
			while (scanner.getCurrentChar() != scanner.mServiceChars.getDataElementSeparator()) {
				s += c = scanner.rawConsumeChar();
			}
			context.getGenerator().insertElement (context.getParticle().getName(), s, mNodeClass);
			return true;
		}

		StringBuffer s = context.getScanner().consumeString(ServiceChars.ComponentSeparator, true);
		if (s.length() == 0)
			return false; // data element is absent

		mValidator.makeValidOnRead(s, context, beforeState);
		
		if (context.getParser().getEDIKind() == EDISettings.EDIStandard.EDIX12) {
			if (context.getParticle().getName().equals( "F447") && context.getCurrentSegmentName().equals("LS"))
				context.getParser().setF447( new String( s) );
		}

		// codelist validate
		if (!mValidator.hasValue(s.toString())) {
			if (!mValidator.isIncomplete())
				context.handleError(
					Parser.ErrorType.CodeListValueWrong,
					new ErrorPosition( beforeState ),
					ErrorMessages.GetInvalidCodeListValueMessage(s.toString(), mValidator.getCodeListValues()),
					s.toString()
				);
			else
				context.handleWarning(
					new ErrorPosition( beforeState ),
					ErrorMessages.GetIncompleteCodeListValueMessage(s.toString(), mValidator.getCodeListValues()),
					s.toString()
				);
		}
		
		// embedded codelist validate
		if (!embeddedCodeListValidate(s.toString(), context.getParticle()))
			context.handleError(
				Parser.ErrorType.CodeListValueWrong,
				new ErrorPosition( beforeState ),
				ErrorMessages.GetInvalidCodeListValueMessage(s.toString(), embeddedCodeListValueList(context.getParticle())),
				s.toString()
			);


		// edi validate
		sError.append(context.getValidator().validate(context, new ErrorPosition( beforeState ), context.getParent().getParticle().getName(), context.getParticle().getName(), s.toString()));

		node = context.getGenerator().insertElement (context.getParticle().getName(), s.toString(), mNodeClass);

		if (context.getParticle().getNode().getInlineRule() != null && context.getParticle().getNode().getInlineRule().getValidate()) {
			String sExpected = context.getParticle().getNode().getInlineRule().getExpression().evaluate(node);
			if (!mValidator.compare(s.toString(), sExpected)) {
				sError.append("Field does not contain expected value ('");
				sError.append(s.toString());
				sError.append("' instead of '");
				sError.append(sExpected);
				sError.append("').");
			}
		} else if (context.getParticle().getNode().getRules() != null) {
			for (DataRule rule : context.getParticle().getNode().getRules()) {
				if (rule.getValidate() && rule.getReference().matchesNodes(context.getGenerator().getPath())) {
					String sExpected = rule.getExpression().evaluate(node);
					if (!mValidator.compare(s.toString(), sExpected)) {
						sError.append("Field does not contain expected value ('");
						sError.append(s.toString());
						sError.append("' instead of '");
						sError.append(sExpected);
						sError.append("').");
					}
				}
			}
		}

		if (sError.length() > 0)
			context.handleError( 
				Parser.ErrorType.SemanticWrong,
				new ErrorPosition( beforeState ),
				sError.toString(),
				s.toString()
			);

		return true;
	}

	public void write (Writer writer, ITextNode node, Particle particle) throws IOException {
		StringBuffer sError = new StringBuffer();
		StringBuffer sbvalue = new StringBuffer();
		String nodeName = new String();
		
		if (node != null) {
			sbvalue.append(node.getValue());
			nodeName = node.getName();
		}

		boolean escapeString = true;
		if (writer.getEDIKind() == EDISettings.EDIStandard.EDIFixed) {
			escapeString = false;
		}

		if (writer.getEDIKind() == EDISettings.EDIStandard.EDIHL7 
			&& isHL7SpecialField(nodeName, "-2")) {
			sbvalue = new StringBuffer();
			sbvalue.append( writer.getServiceChars().getComponentSeparator());
			sbvalue.append( writer.getServiceChars().getRepetitionSeparator());
			if (writer.getServiceChars().getReleaseCharacter() != 0) {
				sbvalue.append( writer.getServiceChars().getReleaseCharacter());
				if (writer.getServiceChars().getSubComponentSeparator() != 0)
					sbvalue.append( writer.getServiceChars().getSubComponentSeparator());
			}
			//don't escape separators
			escapeString = false;
		}

		if (!mValidator.makeValidOnWrite (sbvalue, node, writer, escapeString))
			return;

		String sValue = sbvalue.toString();

		if (node != null) {
			if (particle.getNode().getInlineRule() != null && particle.getNode().getInlineRule().getValidate()) {
				String sExpected = particle.getNode().getInlineRule().getExpression().evaluate(node);
				if (!mValidator.compare(sValue, sExpected)) {
					sError.append("Field does not contain expected value ('");
					sError.append(sValue);
					sError.append("' instead of '");
					sError.append(sExpected);
					sError.append("').");
				}
			} else if (particle.getNode().getRules() != null) {
				for (DataRule rule : particle.getNode().getRules()) {
					if (rule.getValidate() && rule.getReference().matchesNodes(node)) {
						String sExpected = rule.getExpression().evaluate(node);
						if (!mValidator.compare(sValue, sExpected)) {
							sError.append("Field does not contain expected value ('");
							sError.append(sValue);
							sError.append("' instead of '");
							sError.append(sExpected);
							sError.append("').");
						}
					}
				}
			}
		}
		
		//codelist validate
		if (!mValidator.hasValue( sValue)) {
			if (!mValidator.isIncomplete())
				writer.handleError( node, Parser.ErrorType.CodeListValueWrong, ErrorMessages.GetInvalidCodeListValueMessage(sValue, mValidator.getCodeListValues()) );
			else
				writer.handleWarning( node, ErrorMessages.GetIncompleteCodeListValueMessage(sValue, mValidator.getCodeListValues()) );
		}
		
		// embedded codelist validate
		if (!embeddedCodeListValidate(sValue, particle))
			writer.handleError(
				node,
				Parser.ErrorType.CodeListValueWrong,
				ErrorMessages.GetInvalidCodeListValueMessage(sValue, embeddedCodeListValueList(particle))
			);

		//edi validate
		if (node != null)
			sError.append(writer.getValidator().validate( null, null, node.getParent().getName(), nodeName, sValue));
		if (sError.length() > 0)
			writer.handleError( node, Parser.ErrorType.SemanticWrong, sError.toString());


		writer.write (sValue);
	}

	private boolean embeddedCodeListValidate(String value, Particle particle) {
		if (particle.getCodeValues().length == 0)
			return true;

		for (String s : particle.getCodeValues())
			if (s.equals( value ))
				return true;

		return false;
	}

	private String embeddedCodeListValueList(Particle particle) {
		StringBuffer validList = new StringBuffer();
		for (String s : particle.getCodeValues())
			validList.append(", '" + s + "'");

		return validList.toString().substring(2);
	}
}
