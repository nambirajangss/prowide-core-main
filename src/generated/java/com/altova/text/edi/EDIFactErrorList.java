////////////////////////////////////////////////////////////////////////
//
// EDIFactErrorList.java
//
// This file was generated by MapForce 2025.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

import java.io.IOException;

import com.altova.text.Generator;
import com.altova.text.ITextNode;
import com.altova.text.TextNode;
import com.altova.text.edi.Parser.Context;

public class EDIFactErrorList extends StructureItem {

	public EDIFactErrorList (String name, Particle[] children) {
		super(name, ITextNode.ErrorList, children);
	}
	
	@Override
	public boolean read(Context context) {
		Generator gen = context.getParent().getGeneratorForErrors();
		if (mName.equals( "ParserErrors_Message" )) {
			ITextNode unh = context.getGenerator().getCurrentNode().getChildren().getFirstNodeByName( "UNH" );
			ITextNode unt = context.getGenerator().getCurrentNode().getChildren().getFirstNodeByName( "UNT" );
			if( unh == null ) {
				context.getParent().handleMessageError( Parser.ErrorType.MissingSegment, new ErrorPosition( context.getScanner() ), null, "UNH", "Message header UNH is missing." );
			}
			if( unt == null ) {
				context.getParent().handleMessageError( Parser.ErrorType.MissingSegment, new ErrorPosition( context.getScanner() ), null, "UNT", "Message trailer UNT is missing." );
			}

			ITextNode mf_ucm = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCM" );
			if( mf_ucm == null ) {
				mf_ucm = new TextNode( gen.getCurrentNode(), "MF_UCM", ITextNode.Group );
				ITextNode f0083 = new TextNode( mf_ucm, "F0083", ITextNode.DataElement );
				f0083.setValue( "7" );
			}
		} else if (mName.equals( "ParserErrors_Group" )) {
			// check for UNE if UNG is present
			ITextNode ung = context.getGenerator().getCurrentNode().getChildren().getFirstNodeByName( "UNG" );
			ITextNode une = context.getGenerator().getCurrentNode().getChildren().getFirstNodeByName( "UNE" );
			if( ung == null && une != null) {
				context.getParent().handleGroupError( Parser.ErrorType.MissingSegment, new ErrorPosition( context.getScanner() ), null, "UNG", "Group trailer UNE is present without header UNG." );
			}
			if( ung != null && une == null ) {
				context.getParent().handleGroupError( Parser.ErrorType.MissingSegment, new ErrorPosition( context.getScanner() ), null, "UNE", "Group trailer UNE is missing." );
			}

			ITextNode mf_ucf = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCF" );
			if( mf_ucf == null ) {
				mf_ucf = new TextNode( gen.getCurrentNode(), "MF_UCF", ITextNode.Group );
				ITextNode f0083 = new TextNode( mf_ucf, "F0083", ITextNode.DataElement );
				f0083.setValue( "7" );
			}
		} else if (mName.equals( "ParserErrors_Interchange" )) {
			// check for UNE if UNG is present
			ITextNode unb = context.getGenerator().getCurrentNode().getChildren().getFirstNodeByName( "UNB" );
			ITextNode unz = context.getGenerator().getCurrentNode().getChildren().getFirstNodeByName( "UNZ" );
			if( unb == null && unz != null ) {
				context.getParent().handleInterchangeError( Parser.ErrorType.MissingSegment, new ErrorPosition( context.getScanner() ), null, "UNB", "Interchange trailer UNB is present without header UNZ." );
			}
			if( unb != null && unz == null ) {
				context.getParent().handleInterchangeError( Parser.ErrorType.MissingSegment, new ErrorPosition( context.getScanner() ), null, "UNZ", "Interchange trailer UNZ is missing." );
			}

			ITextNode mf_uci = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCI" );
			if( mf_uci == null ) {
				mf_uci = new TextNode( gen.getCurrentNode(), "MF_UCI", ITextNode.Group );
				ITextNode f0083 = new TextNode( mf_uci, "F0083", ITextNode.DataElement );
				f0083.setValue( "7" );
			}
		}

		if (gen.getChildren().size() > 0) {
			context.getGenerator().getCurrentNode().getChildren().add( gen.getRootNode() );
			context.getParent().createGeneratorForErrors( mName);
		}
		return true;
	}

	@Override
	public void write(Writer writer, ITextNode node, Particle particle) throws IOException {
		
	}

}