////////////////////////////////////////////////////////////////////////
//
// Parser.java
//
// This file was generated by MapForce 2025.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

import java.util.ArrayList;
import java.util.Arrays;

import com.altova.text.Generator;
import com.altova.text.ITextNode;
import com.altova.text.TextNode;
import com.altova.text.ITextNodeList;

public class Parser {

	Action mErrorSettings[] = {
		Action.Stop //this sould always get overwritten by the Document
	};

	class ParseInfo implements Cloneable {
		//counters for edi errors
		char mF717;
		char mF715;
		String msF447 = null;
		long mTransactionSetCount = 0;
		long mTransactionSetAccepted = 0;
		long mCurrentSegmentPos = 0;
		long mComponentDataElementPos = 0;
		long mDataElementPos = 0;

		public ParseInfo clone () {
			ParseInfo ret = null;
			try {
				ret = (ParseInfo) super.clone();
			} catch (CloneNotSupportedException e) {
				//won't happen
			}
			return ret;
		}
	}

	private ParseInfo mParseInfo = new ParseInfo();
	protected java.util.TreeMap<String, Message> mMessages = new java.util.TreeMap<String, Message>();
	String msCurrentMessageType = null;

	public enum ErrorType {
		Undefined,
		MissingSegment,
		MissingGroup,
		MissingFieldOrComposite,
		ExtraData,
		FieldValueInvalid,
		InvalidDate,
		InvalidTime,
		ExtraRepeat,
		NumericOverflow,
		DataElementTooShort,
		DataElementTooLong,
		UnexpectedEndOfFile,
		CodeListValueWrong,
		SemanticWrong,
		SegmentUnexpected,
		SegmentUnrecognized,
		UsingNotUsed,
		NotAllDataParsed,
		ErrorCount
	}
	
	public enum Action {
		Undefined,
		Ignore,
		ReportAccept,
		ReportReject,
		Stop,
	}

	protected EDISettings mSettings;

	//Segment vectors for error reporting
	public final java.util.HashSet<String> StandardSegments = new java.util.HashSet<String>( 1500 );

	public class Context {
		Particle mParticle;
		Parser mParser;
		Scanner mScanner;
		Generator mGenerator;
		Generator mGeneratorForErrors = null;
		Context mParent = null;
		EDISemanticValidator mValidator;
		ITextNode mSettingsNode;
		long mOccurence;

		public Particle getParticle() {
			return mParticle;
		}

		public Parser getParser() {
			return mParser;
		}

		public Scanner getScanner() {
			return mScanner;
		}

		public Generator getGenerator() {
			return mGenerator;
		}

		public Generator getGeneratorForErrors() {
			return mGeneratorForErrors;
		}

		public void createGeneratorForErrors(final String sName) {
			mGeneratorForErrors = new Generator();
			mGeneratorForErrors.enterElement( sName, ITextNode.ErrorList );
		}

		public Context getParent() {
			return mParent;
		}

		public ITextNode getSettingsNode() {
			return mSettingsNode;
		}
		
		public void setSettingsNode(ITextNode node) {
			mSettingsNode = node;
		}
		
		public Context (Parser parser, Scanner scanner, Particle rootParticle, Generator generator, EDISemanticValidator validator) {
			this.mParticle = rootParticle;
			this.mParser = parser;
			this.mScanner = scanner;
			this.mGenerator = generator;
			this.mValidator = validator;
			this.mSettingsNode = null;
			this.mOccurence = 0;
		}

		public Context (Context parent, Particle newParticle) {
			this.mParticle = newParticle;
			this.mParser = parent.mParser;
			this.mScanner = parent.mScanner;
			this.mGenerator = parent.mGenerator;
			this.mValidator = parent.mValidator;
			this.mSettingsNode = parent.mSettingsNode;
			this.mParent = parent;
			this.mOccurence = 0;

			if (newParticle.mNameOverride.startsWith( "Message" )) {
				mGeneratorForErrors = new Generator();
				mGeneratorForErrors.enterElement( "ParserErrors_Message", ITextNode.ErrorList );
			} else if (newParticle.mNameOverride.equals( "Group" )) {
				mGeneratorForErrors = new Generator();
				mGeneratorForErrors.enterElement( "ParserErrors_Group", ITextNode.ErrorList );
			} else if( newParticle.mNameOverride.equals( "Interchange" ) ) {
				mGeneratorForErrors = new Generator();
				mGeneratorForErrors.enterElement( "ParserErrors_Interchange", ITextNode.ErrorList );
			}
		}

		public Parser.Context newContext(Parser.Context context, Particle particle) {
			return new Parser.Context(context, particle);
		}

		public void handleError( ErrorType error, ErrorPosition position, String message ) {
			handleError( error, position, message, "" );
		}

		public void handleError( ErrorType error, ErrorPosition position, String message, String originalData ) {
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIX12) {
				handleErrorAction( error, position, message );
				Generator gen = findGenerator();
				if (gen != null) {
					switch (mParser.getErrorSettings()[error.ordinal()]) {
						case ReportReject: {
							mParser.mParseInfo.mF717 = 'R';
							mParser.mParseInfo.mF715 = 'R';
						}
						break;
						case ReportAccept: {
							//only change Transaction Set Code from Accepted state here.
							if (mParser.mParseInfo.mF717 == 'A') {
								mParser.mParseInfo.mF717 = 'E';
								mParser.mParseInfo.mF715 = 'E';
							}
						}
						break;
						case Ignore:
							return;
					}

					byte nodeClass = mParticle.getNode().getNodeClass();
					String currentSegment = getCurrentSegmentName();

					if (error == ErrorType.MissingGroup ||
						error == ErrorType.ExtraRepeat ||
						nodeClass == ITextNode.Segment ||
						nodeClass == ITextNode.Composite ||
						nodeClass == ITextNode.DataElement) {
						gen.enterElement( "LoopMF_AK3", ITextNode.Group );
						gen.enterElement( "MF_AK3", ITextNode.Group );

						String segmentSyntaxErrorCode = "";
						switch (error) {
							case ExtraRepeat: {
								if (nodeClass == ITextNode.Group)
									segmentSyntaxErrorCode = "4";
								else
									segmentSyntaxErrorCode = "5";
							}
							break;
							case MissingGroup:
							case MissingSegment: segmentSyntaxErrorCode = "3"; break;
							case SegmentUnexpected: {
								segmentSyntaxErrorCode = "2";
								currentSegment = originalData;
							}
							break;
							case SegmentUnrecognized: {
								segmentSyntaxErrorCode = "1";
								currentSegment = originalData;
							}
							break;
							default:
								if (nodeClass == ITextNode.Composite ||
									nodeClass == ITextNode.DataElement)
									segmentSyntaxErrorCode = "8";
								else
									segmentSyntaxErrorCode = "2";
						}

						gen.insertElement( "F721", currentSegment, ITextNode.DataElement );
						gen.insertElement( "F719", "" + mParser.getCurrentSegmentPos(), ITextNode.DataElement );
						if (mParser.getF447() != null && mParser.getF447().length() > 0)
							gen.insertElement( "F447", mParser.getF447(), ITextNode.DataElement );

						gen.insertElement( "F720", segmentSyntaxErrorCode, ITextNode.DataElement );
						gen.insertElement( "ErrorMessage", message, ITextNode.DataElement );
						gen.leaveElement( "MF_AK3" );
					}

					if (nodeClass == ITextNode.Composite ||
						nodeClass == ITextNode.DataElement) {
						// error in data element
						gen.enterElement( "MF_AK4", ITextNode.Group );

						//special handling for relase 3040
						EDIX12Settings x12Settings = (EDIX12Settings)mParser.getSettings();
						if (x12Settings.getRelease().equals("3040")) {
							gen.insertElement( "F722", "" + mParser.getDataElementPos(), ITextNode.DataElement );
						} else {
							gen.enterElement( "C030", ITextNode.Composite );
							gen.insertElement( "F722", "" + mParser.getDataElementPos(), ITextNode.DataElement );
	
							// is optional F1528
							if (mParser.mParseInfo.mComponentDataElementPos > 0)
								gen.insertElement( "F1528", "" + mParser.getComponentDataElementPos(), ITextNode.DataElement);
	
							// is optional F1686
							if (mOccurence > 0)
								gen.insertElement( "F1686", "" + mOccurence, ITextNode.DataElement);
	
							gen.leaveElement( "C030" );
						}

						String dataElementReferenceNumber = mParticle.getNode().getName().substring( 1 );	// F1234 -> 1234
						gen.insertElement( "F725", dataElementReferenceNumber, ITextNode.DataElement );

						String dataElementSyntaxErrorCode = getX12DataElementErrorCode( error );
						gen.insertElement( "F723", dataElementSyntaxErrorCode, ITextNode.DataElement );
						gen.insertElement( "F724", originalData, ITextNode.DataElement );
						gen.insertElement( "ErrorMessage", message, ITextNode.DataElement );
						gen.leaveElement( "MF_AK4" );
					}

					if (error == ErrorType.MissingGroup ||
						error == ErrorType.ExtraRepeat ||
						nodeClass == ITextNode.Segment ||
						nodeClass == ITextNode.Composite ||
						nodeClass == ITextNode.DataElement) {
						gen.leaveElement( "LoopMF_AK3" );
					}
				}
			}
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIFACT) {
				Generator gen = findGenerator();
				if (gen != null) {
					byte nodeClass = mParticle.getNode().getNodeClass();
					String currentSegment = getCurrentSegmentName();
					if( currentSegment == "UNB" || currentSegment == "UNZ" ) {
						handleInterchangeError( error, position, getEDIFACTDataElementErrorCode( error ), currentSegment, message );
					} else if( currentSegment == "UNG" || currentSegment == "UNE" ) {
						handleGroupError( error, position, getEDIFACTDataElementErrorCode( error ), currentSegment, message );
					} else if( currentSegment == "UNH" || currentSegment == "UNT" ) {
						handleMessageError( error, position, getEDIFACTDataElementErrorCode( error ), currentSegment, message );
					} else if( nodeClass == ITextNode.Segment ) {
						handleSegmentError( error, position, getEDIFACTDataElementErrorCode( error ), currentSegment, message );
					} else if( nodeClass == ITextNode.DataElement || nodeClass == ITextNode.Composite ) {
						handleDataElementError( error, position, getEDIFACTDataElementErrorCode( error ), currentSegment, message );
					} else {
						handleErrorAction( error, position, message );
					}
				} else {
					handleErrorAction( error, position, message );
				}
			}
		}

		public void handleErrorAction( ErrorType error, ErrorPosition position, String message ) {
			String location = mParticle.getNode().getName();
			Context parent = mParent;
			while (parent != null) {
				if (parent.getParticle().getNode().getNodeClass() != ITextNode.Select)
					location = parent.getParticle().getNode().getName() + " / " + location;
				parent = parent.getParent();
			}

			String lineLoc = String.format( "Line %d column %d (offset 0x%x): ", position.getLine(), position.getColumn() + 1, position.getPosition() );
			location = lineLoc + location;
			
			switch (mParser.getErrorSettings()[error.ordinal()]) {
				case Stop: {
					throw new com.altova.AltovaException (location + ": " + message);
				}
				case ReportReject:
				case ReportAccept: {
					System.err.println("Warning: " + location + ": " + message);
				}
				break;
				case Ignore:
					break;
			}
		}

		public void handleInterchangeError( ErrorType error, ErrorPosition position, String errorcode, String segmentTag, String message ) {
			handleErrorAction( error, position, message );
			
			Action action = mParser.getErrorSettings()[error.ordinal()];
			if (action == Action.Ignore) {
				return;
			}
			
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIFACT) {
				Generator gen = findGenerator();
				
				if (gen != null) {
					if (errorcode == null) {
						errorcode = getEDIFACTDataElementErrorCode( error );
					}
					
					ITextNode mf_uci = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCI" );
					if( mf_uci == null ) {
						mf_uci = new TextNode( gen.getCurrentNode(), "MF_UCI", ITextNode.Group );
					}
					ITextNode f0083 = mf_uci.getChildren().getFirstNodeByName( "F0083" );
					if( f0083 == null ) {
						f0083 = new TextNode( mf_uci, "F0083", ITextNode.DataElement );
					}
					ITextNode f0085 = mf_uci.getChildren().getFirstNodeByName( "F0085" );
					if( action == Action.ReportReject && f0083.getValue().isEmpty() || action == Action.ReportAccept && f0085 == null ) {
						f0083.setValue( action == Action.ReportReject ? "4" : "7" );
						if( f0085 == null ) {
							f0085 = new TextNode( mf_uci, "F0085", ITextNode.DataElement );
						}
						f0085.setValue( errorcode );
						ITextNode f0135 = mf_uci.getChildren().getFirstNodeByName( "F0135" );
						if( f0135 == null ) {
							f0135 = new TextNode( mf_uci, "F0135", ITextNode.DataElement );
						}
						f0135.setValue( segmentTag );
						setErrorLocation( mf_uci );
					}
				}
			}
		}

		public void handleGroupError( ErrorType error, ErrorPosition position, String errorcode, String segmentTag, String message ) {
			handleErrorAction( error, position, message );

			Action action = mParser.getErrorSettings()[error.ordinal()];
			if (action == Action.Ignore) {
				return;
			}
			
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIFACT) {
				Generator gen = findGenerator();
				
				if (gen != null) {
					if (errorcode == null) {
						errorcode = getEDIFACTDataElementErrorCode( error );
					}
					
					ITextNode mf_ucf = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCF" );
					if( mf_ucf == null ) {
						mf_ucf = new TextNode( gen.getCurrentNode(), "MF_UCF", ITextNode.Group );
					}
					ITextNode f0083 = mf_ucf.getChildren().getFirstNodeByName( "F0083" );
					if( f0083 == null ) {
						f0083 = new TextNode( mf_ucf, "F0083", ITextNode.DataElement );
					}
					ITextNode f0085 = mf_ucf.getChildren().getFirstNodeByName( "F0085" );
					if( action == Action.ReportReject && f0083.getValue().isEmpty() || action == Action.ReportAccept && f0085 == null ) {
						f0083.setValue( action == Action.ReportReject ? "4" : "7" );
						if( f0085 == null ) {
							f0085 = new TextNode( mf_ucf, "F0085", ITextNode.DataElement );
						}
						f0085.setValue( errorcode );
						ITextNode f0135 = mf_ucf.getChildren().getFirstNodeByName( "F0135" );
						if( f0135 == null ) {
							f0135 = new TextNode( mf_ucf, "F0135", ITextNode.DataElement );
						}
						f0135.setValue( segmentTag );
						setErrorLocation( mf_ucf );
					}
				}
			}
		}

		public void handleMessageError( ErrorType error, ErrorPosition position, String errorcode, String segmentTag, String message ) {
			handleErrorAction( error, position, message );

			Action action = mParser.getErrorSettings()[error.ordinal()];
			if (action == Action.Ignore) {
				return;
			}
			
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIFACT) {
				Generator gen = findGenerator();
				
				if (gen != null) {
					if (errorcode == null) {
						errorcode = getEDIFACTDataElementErrorCode( error );
					}
					
					ITextNode mf_ucm = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCM" );
					if( mf_ucm == null ) {
						mf_ucm = new TextNode( gen.getCurrentNode(), "MF_UCM", ITextNode.Group );
					}
					ITextNode f0083 = mf_ucm.getChildren().getFirstNodeByName( "F0083" );
					if( f0083 == null ) {
						f0083 = new TextNode( mf_ucm, "F0083", ITextNode.DataElement );
					}
					ITextNode f0085 = mf_ucm.getChildren().getFirstNodeByName( "F0085" );
					if( action == Action.ReportReject && f0083.getValue().isEmpty() || action == Action.ReportAccept && f0085 == null ) {
						f0083.setValue( action == Action.ReportReject ? "4" : "7" );
						if( f0085 == null ) {
							f0085 = new TextNode( mf_ucm, "F0085", ITextNode.DataElement );
						}
						f0085.setValue( errorcode );
						ITextNode f0135 = mf_ucm.getChildren().getFirstNodeByName( "F0135" );
						if( f0135 == null ) {
							f0135 = new TextNode( mf_ucm, "F0135", ITextNode.DataElement );
						}
						f0135.setValue( segmentTag );
						setErrorLocation( mf_ucm );
					}
				}
			}
		}

		public void handleSegmentError( ErrorType error, ErrorPosition position, String errorcode, String segmentTag, String message ) {
			handleErrorAction( error, position, message );

			Action action = mParser.getErrorSettings()[error.ordinal()];
			if (action == Action.Ignore) {
				return;
			}
			
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIFACT) {
				Generator gen = findGenerator();
				
				if (gen != null) {
					if (errorcode == null) {
						errorcode = getEDIFACTDataElementErrorCode( error );
					}
					
					ITextNode mf_ucm = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCM" );
					if( mf_ucm == null ) {
						mf_ucm = new TextNode( gen.getCurrentNode(), "MF_UCM", ITextNode.Group );
					}
					ITextNode f0083 = mf_ucm.getChildren().getFirstNodeByName( "F0083" );
					if( f0083 == null ) {
						f0083 = new TextNode( mf_ucm, "F0083", ITextNode.DataElement );
					}
					if( !f0083.getValue().equals( "4" ) ) {
						f0083.setValue( action == Action.ReportReject ? "4" : "7" );
					}

					ITextNode mf_sgm = null;
					ITextNode mf_ucs = null;
					String pos = Long.toString(mValidator.getCurrentSegmentCount());
					ITextNodeList filtered = gen.getCurrentNode().getChildren().filterByName( "SGM" );
					for(int i=0; i < filtered.size(); ++i) {
						ITextNode n = filtered.getAt(i);
						ITextNode g = n.getChildren().getFirstNodeByName( "UCS" );
						ITextNode f = g.getChildren().getFirstNodeByName( "F0096" );
						if( f != null && f.getValue().equals( pos ) ) {
							mf_sgm = n;
							mf_ucs = g;
							break;
						}
					}
					if( mf_sgm == null ) {
						mf_sgm = new TextNode( gen.getCurrentNode(), "SGM", ITextNode.Group );
						mf_ucs = new TextNode( mf_sgm, "UCS", ITextNode.Segment );
						ITextNode f0096 = new TextNode( mf_ucs, "F0096", ITextNode.DataElement );
						f0096.setValue( pos );
						ITextNode f0085 = new TextNode( mf_ucs, "F0085", ITextNode.DataElement );
						f0085.setValue( errorcode );
					} else {
						ITextNode f0096 = mf_ucs.getChildren().getFirstNodeByName( "F0096" );
						if( !f0096.getValue().equals( "4" ) ) {
							f0096.setValue( action == Action.ReportReject ? "4" : "7" );
							ITextNode f0085 = mf_ucs.getChildren().getFirstNodeByName( "F0085" );
							if( f0085 == null ) {
								f0085 = new TextNode( mf_ucs, "F0085", ITextNode.DataElement );
							}
							f0085.setValue( errorcode );
						}
					}
				}
			}
		}

		public void handleDataElementError( ErrorType error, ErrorPosition position, String errorcode, String segmentTag, String message ) {
			handleErrorAction( error, position, message );

			Action action = mParser.getErrorSettings()[error.ordinal()];
			if (action == Action.Ignore) {
				return;
			}
			
			if (mParser.getEDIKind() == EDISettings.EDIStandard.EDIFACT) {
				Generator gen = findGenerator();
				
				if (gen != null) {
					if (errorcode == null) {
						errorcode = getEDIFACTDataElementErrorCode( error );
					}
					
					ITextNode mf_ucm = gen.getCurrentNode().getChildren().getFirstNodeByName( "MF_UCM" );
					if( mf_ucm == null ) {
						mf_ucm = new TextNode( gen.getCurrentNode(), "MF_UCM", ITextNode.Group );
					}
					ITextNode f0083 = mf_ucm.getChildren().getFirstNodeByName( "F0083" );
					if( f0083 == null ) {
						f0083 = new TextNode( mf_ucm, "F0083", ITextNode.DataElement );
					}
					if( !f0083.getValue().equals( "4" ) ) {
						f0083.setValue( action == Action.ReportReject ? "4" : "7" );
					}

					ITextNode mf_sgm = null;
					ITextNode mf_ucs = null;
					String pos = Long.toString(mValidator.getCurrentSegmentCount());
					ITextNodeList filtered = gen.getCurrentNode().getChildren().filterByName( "SGM" );
					for(int i=0; i < filtered.size(); ++i) {
						ITextNode n = filtered.getAt(i);
						ITextNode g = n.getChildren().getFirstNodeByName( "UCS" );
						ITextNode f = g.getChildren().getFirstNodeByName( "F0096" );
						if( f != null && f.getValue().equals( pos ) ) {
							mf_sgm = n;
							mf_ucs = g;
							break;
						}
					}
					if( mf_sgm == null ) {
						mf_sgm = new TextNode( gen.getCurrentNode(), "SGM", ITextNode.Group );
						mf_ucs = new TextNode( mf_sgm, "UCS", ITextNode.Segment );
						ITextNode f0096 = new TextNode( mf_ucs, "F0096", ITextNode.DataElement );
						f0096.setValue( pos );
					}
					ITextNode new_ucd = new TextNode( null, "UCD", ITextNode.Segment );
					setErrorLocation( new_ucd );
					ITextNode ts = new_ucd.getChildren().getFirstNodeByName( "S011" );
					ITextNode t0098 = ts.getChildren().getFirstNodeByName( "F0098" );
					String p0098 = t0098 != null ? t0098.getValue() : null;
					ITextNode t0104 = ts.getChildren().getFirstNodeByName( "F0104" );
					String p0104 = t0104 != null ? t0104.getValue() : null;
					ITextNode t0136 = ts.getChildren().getFirstNodeByName( "F0136" );
					String p0136 = t0136 != null ? t0136.getValue() : null;
					ITextNode ucd = null;
					filtered = mf_sgm.getChildren().filterByName( "UCD" );
					for(int i=0; i < filtered.size(); ++i) {
						ITextNode d = filtered.getAt(i);
						ITextNode s = d.getChildren().getFirstNodeByName( "S011" );
						if( s != null ) {
							ITextNode s0098 = s.getChildren().getFirstNodeByName( "F0098" );
							ITextNode s0104 = s.getChildren().getFirstNodeByName( "F0104" );
							ITextNode s0136 = s.getChildren().getFirstNodeByName( "F0136" );
							if( ( s0098 != null && p0098 != null && s0098.getValue().equals( p0098 ) || s0098 == null && ( p0098 == null || p0098.isEmpty() ) ) &&
								( s0104 != null && p0104 != null && s0104.getValue().equals( p0104 ) || s0104 == null && ( p0104 == null || p0104.isEmpty() ) ) &&
								( s0136 != null && p0136 != null && s0136.getValue().equals( p0136 ) || s0136 == null && ( p0136 == null || p0136.isEmpty() ) ) ) {
								ucd = d;
								break;
							}
						}
					}
					if( ucd == null ) {
						ucd = new_ucd; // new TextNode( mf_sgm, "UCD", ITextNode.Segment );
						new_ucd.setParent( mf_sgm );
						mf_sgm.getChildren().add( new_ucd );
						ITextNode f0085 = new TextNode( ucd, "F0085", ITextNode.DataElement );
						f0085.setValue( errorcode );
						//setErrorLocation( ucd );
					}
				}
			}
		}

		public void setErrorLocation( ITextNode mf_ucm ) {
			ITextNode s011 = mf_ucm.getChildren().getFirstNodeByName( "S011" );
			if( s011 == null ) {
				s011 = new TextNode( mf_ucm, "S011", ITextNode.Composite );
			}
			if( mParticle.getNode().getNodeClass() == ITextNode.DataElement || mParticle.getNode().getNodeClass() == ITextNode.Composite ) {
				if( mParent.getParticle().getNode().getNodeClass() == ITextNode.Composite ) {
					ITextNode f0098 = s011.getChildren().getFirstNodeByName( "F0098" );
					if( f0098 == null ) {
						f0098 = new TextNode( s011, "F0098", ITextNode.DataElement );
					}
					f0098.setValue( Integer.toString( Arrays.asList(mParent.getParent().getParticle().getNode().getChildren()).indexOf( mParent.getParticle() ) + 2 ) );

					ITextNode f0104 = s011.getChildren().getFirstNodeByName( "F0104" );
					if( f0104 == null ) {
						f0104 = new TextNode( s011, "F0104", ITextNode.DataElement );
					}
					f0104.setValue( Integer.toString( Arrays.asList(mParent.getParticle().getNode().getChildren()).indexOf( mParticle ) + 1 ) );

					if( mOccurence > 1 || mParticle.getMaxOccurs() > 1 || mParticle.getMergedEntries() > 1 ) {
						ITextNode f0136 = s011.getChildren().getFirstNodeByName( "F0136" );
						if( f0136 == null ) {
							f0136 = new TextNode( s011, "F0136", ITextNode.DataElement );
						}
						f0136.setValue( Long.toString(mOccurence) );
					}
				} else {
					ITextNode f0098 = s011.getChildren().getFirstNodeByName( "F0098" );
					if( f0098 == null ) {
						f0098 = new TextNode( s011, "F0098", ITextNode.DataElement );
					}
					f0098.setValue( Integer.toString( Arrays.asList(mParent.getParticle().getNode().getChildren()).indexOf( mParticle ) + 2 ) );

					if( mOccurence > 1 || mParticle.getMaxOccurs() > 1 || mParticle.getMergedEntries() > 1 ) {
						ITextNode f0136 = s011.getChildren().getFirstNodeByName( "F0136" );
						if( f0136 == null ) {
							f0136 = new TextNode( s011, "F0136", ITextNode.DataElement );
						}
						f0136.setValue( Long.toString(mOccurence) );
					}
				}
			}
		}

		public void handleWarning( ErrorPosition position, String message, String originalData ) {
			Generator gen = findGenerator();
			String location = mParticle.getNode().getName();
			Context parent = mParent;
			while (parent != null) {
				if (parent.getParticle().getNode().getNodeClass() != ITextNode.Select)
					location = parent.getParticle().getNode().getName() + " / " + location;
				parent = parent.getParent();
			}

			String lineLoc = String.format( "Line %d column %d (offset 0x%x): ", position.getLine(), position.getColumn() + 1, position.getPosition() );
			location = lineLoc + location;
			
			System.err.println("Warning: " + location + ": " + message);
		}

		Generator findGenerator() {
			if (mGeneratorForErrors != null)
				return mGeneratorForErrors;
			if (mParent != null)
				return mParent.findGenerator();
			return null;
		}

		String getCurrentSegmentName() {
			if (mParticle.getNode().getNodeClass() == ITextNode.Group &&
				mParticle.getNode().getChildCount() > 0)
				return mParticle.getNode().child(0).getName();
			if (mParticle.getNode().getNodeClass() == ITextNode.Segment)
				return mParticle.getNode().getName();
			if (mParent != null)
				return mParent.getCurrentSegmentName();
			return "";
		}

		String getX12DataElementErrorCode( ErrorType error ) {
			switch (error) {
				case MissingFieldOrComposite : return "1";
				case ExtraData : return "3";
				case ExtraRepeat : return "3";
				case DataElementTooShort : return "4";
				case DataElementTooLong : return "5";
				case FieldValueInvalid : return "6";
				case CodeListValueWrong : return "7";
				case InvalidDate: return "8";
				case InvalidTime: return "9";
				case SemanticWrong: return "10";
				case UsingNotUsed: return "I10";
				default : return "1";
			}
		}

		String getEDIFACTDataElementErrorCode( ErrorType error ) {
			switch (error) {
				case MissingSegment: return "13";
				case MissingGroup: return "13";
				case MissingFieldOrComposite: return "13";
				case ExtraData: return "16";
				case ExtraRepeat: return "35";
				case DataElementTooShort: return "40";
				case DataElementTooLong: return "39";
				case UnexpectedEndOfFile: return "33";
				case FieldValueInvalid: return "12";
				case CodeListValueWrong: return "12";
				case InvalidDate: return "12";
				case InvalidTime: return "12";
				//case SemanticWrong: return "18";
				case UsingNotUsed: return "15";
				case SegmentUnexpected: return "15";
				case SegmentUnrecognized: return "15";
				case NotAllDataParsed: return "33";
				default: return "18";
			}
		}
		
		public EDISemanticValidator getValidator() {
			return mValidator;
		}


		public void setOccurence( long nOccurence) {
			mOccurence = nOccurence;
		}

		public void setCurrentMessageType( String sMessageType ) {
			mParser.setCurrentMessageType( sMessageType );
			mValidator.setCurrentMessageType( sMessageType );
		}
	}

	public Action[] getErrorSettings() {
		return mErrorSettings;
	}

	public void setErrorSettings( Action[] settings) {
		mErrorSettings = settings;
	}

	public EDISettings.EDIStandard getEDIKind() {
		return mSettings.getStandard();
	}

	public EDISettings getSettings() {
		return mSettings;
	}

	public long getDataElementPos() {
		return mParseInfo.mDataElementPos;
	}

	public void resetDataElementPos() {
		mParseInfo.mDataElementPos = 0;
	}

	public void incrementDataElementPos() {
		mParseInfo.mDataElementPos++;
	}

	public long getComponentDataElementPos() {
		return mParseInfo.mComponentDataElementPos;
	}

	public void resetComponentDataElementPos() {
		mParseInfo.mComponentDataElementPos = 0;
	}

	public void incrementComponentDataElementPos() {
		mParseInfo.mComponentDataElementPos++;
	}

	public long getCurrentSegmentPos() {
		return mParseInfo.mCurrentSegmentPos;
	}

	public void incrementCurrentSegmentPos() {
		mParseInfo.mCurrentSegmentPos++;
	}

	public void resetCurrentSegmentPos() {
		mParseInfo.mCurrentSegmentPos = 1;
	}

	public long getTransactionSetCount() {
		return mParseInfo.mTransactionSetCount;
	}

	public void incrementTransactionSetCount() {
		mParseInfo.mTransactionSetCount++;
	}

	public void resetTransactionSetCount() {
		mParseInfo.mTransactionSetCount = 0;
	}

	public long getTransactionSetAccepted() {
		return mParseInfo.mTransactionSetAccepted;
	}

	public void incrementTransactionSetAccepted() {
		mParseInfo.mTransactionSetAccepted++;
	}

	public void resetTransactionSetAccepted() {
		mParseInfo.mTransactionSetAccepted = 0;
	}

	public char getF715() {
		return mParseInfo.mF715;
	}

	public void setF715( char chr) {
		mParseInfo.mF715 = chr;
	}

	public char getF717() {
		return mParseInfo.mF717;
	}

	public void setF717( char chr) {
		mParseInfo.mF717 = chr;
	}

	public String getF447() {
		return mParseInfo.msF447;
	}

	public void setF447( String sF447) {
		mParseInfo.msF447 = sF447;
	}

	public ParseInfo cloneParseInfo() {
		return mParseInfo.clone() ;
	}
	
	public void setParseInfo( ParseInfo parseInfo ) {
		mParseInfo = parseInfo;
	}

	public String getCurrentMessageType() {
		return msCurrentMessageType;
	}

	public void setCurrentMessageType(String sCurrentMessageType) {
		this.msCurrentMessageType = sCurrentMessageType;
	}

	public Message getMessage(String sMessage) {
		return mMessages.get(sMessage);
	}

	public java.util.Set<String> getMessageTypes() {
		return mMessages.keySet();
	}
	
	public Message getFirstMessage() {
		return mMessages.values().iterator().next();
	}

	public ArrayList<Message> filterMessages(String nameStartsWith) {
		ArrayList<Message> filteredMessages = new ArrayList<Message>();
		java.util.Set<String> keyset = mMessages.keySet();
		String[] keys = keyset.toArray( new String[keyset.size()] );
		for (int i = 0 ; i < keys.length ; ++i) {
			String mk = keys[i];
			if (mk.startsWith(nameStartsWith))
				filteredMessages.add(mMessages.get(mk));
		}
		return filteredMessages;
	}

	public boolean parse (Particle rootParticle, String buffer, Generator generator, EDISettings settings) {
		ServiceChars sc = settings.getServiceChars();
		Scanner scanner = new Scanner(buffer, sc, mSettings.getStandard());
		EDISemanticValidator validator = new EDISemanticValidator( settings );
		// validator.setCurrentMessageType( getFirstMessage().getMessageType() );

		//init transaction counter for X12
		mParseInfo.mF715 = 'A';
		// the first ST segment for X12 will set this to 'A' (Accepted)
		// if there is no 'ST' segment there must be something wrong
		mParseInfo.mF717 = 'R';
		resetTransactionSetCount();
		resetTransactionSetAccepted();
		msCurrentMessageType = null;

		Context rootContext = new Context (this, scanner, rootParticle, generator, validator);
		boolean bOk = rootParticle.getNode().read(rootContext);
		scanner.skipWhitespace();
		if (!bOk || !scanner.isAtEnd()) {
			Scanner.State beforeReadState = scanner.getCurrentState();
			String sExtra= scanner.consumeString( ServiceChars.SegmentTerminator, true).toString();
			rootContext.handleError( 
				ErrorType.NotAllDataParsed, 
				new ErrorPosition( beforeReadState ),
				ErrorMessages.GetTextNotParsedMessage( sExtra)
			);
		}
				
		return bOk;
	}
}
