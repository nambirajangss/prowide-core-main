////////////////////////////////////////////////////////////////////////
//
// Settings.java
//
// This file was generated by MapForce 2025.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

import java.io.IOException;
import com.altova.text.ITextNode;

public class Settings extends StructureItem 	{
	public Settings (String name, Particle[] children) {
		super(name, ITextNode.Settings, children);
	}

	public static void updateSettings(ITextNode node, ServiceChars serviceChars) {
		for (int i = 0; i < node.getChildren().size(); i++) {
			ITextNode n = node.getChildren().getAt(i);
			if(n.getName() == "DataElement_Separator")
				n.setValue(Character.toString(serviceChars.getDataElementSeparator()));
			else if(n.getName() == "Composite_Separator")
				n.setValue(Character.toString(serviceChars.getComponentSeparator()));
			else if(n.getName() == "Subcomponent_Separator")
				n.setValue(Character.toString(serviceChars.getSubComponentSeparator()));
			else if(n.getName() == "Repetition_Separator")
				n.setValue(Character.toString(serviceChars.getRepetitionSeparator()));
			else if(n.getName() == "Segment_Terminator")
				n.setValue(Character.toString(serviceChars.getSegmentTerminator()));
			else if(n.getName() == "Decimal_Notation")
				n.setValue(Character.toString(serviceChars.getDecimalSeparator()));
			else if(n.getName() == "Escape_Character")
				n.setValue(Character.toString(serviceChars.getReleaseCharacter()));
		}
	}
	
	public boolean read (Parser.Context context) {
		ServiceChars serviceChars = context.getScanner().getServiceChars();

		context.getGenerator().enterElement (context.getParticle().getName(), mNodeClass);	// begin node construction

		for (Particle p : mChildren) {
			if(p.getName() == "DataElement_Separator")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getDataElementSeparator()), ITextNode.DataElement);
			else if(p.getName() == "Composite_Separator")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getComponentSeparator()), ITextNode.DataElement);
			else if(p.getName() == "Subcomponent_Separator")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getSubComponentSeparator()), ITextNode.DataElement);
			else if(p.getName() == "Repetition_Separator")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getRepetitionSeparator()), ITextNode.DataElement);
			else if(p.getName() == "Segment_Terminator")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getSegmentTerminator()), ITextNode.DataElement);
			else if(p.getName() == "Decimal_Notation")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getDecimalSeparator()), ITextNode.DataElement);
			else if(p.getName() == "Escape_Character")
				context.getGenerator().insertElement(p.getName(), Character.toString(serviceChars.getReleaseCharacter()), ITextNode.DataElement);
		}

		context.getValidator().segment( this.mName);

		context.getParent().setSettingsNode(context.getGenerator().getCurrentNode());
		
		context.getGenerator().leaveElement (context.getParticle().getName());
		return true;
	}

	public void write (Writer writer, ITextNode node, Particle particle) throws IOException {
		if (node != null && node.getName() == "Settings") {
			String sError;
			for (int i = 0; i < node.getChildren().size(); i++) {
				ITextNode n = node.getChildren().getAt(i);
				sError = writer.getValidator().validateSettingsSeparator(n);
				if (sError.length() > 0)
					throw new com.altova.AltovaException (sError);
				char ch = '\0';
				if (n.getValue().length() > 0 && n.getValue().charAt(0) != ' ')
					ch = n.getValue().charAt(0);
				if(n.getName() == "DataElement_Separator") {
					writer.getServiceChars().setDataElementSeparator(ch);
					writer.getServiceChars().setSegmentSeparator(ch);
				}
				else if(n.getName() == "Composite_Separator")
					writer.getServiceChars().setComponentSeparator(ch);
				else if(n.getName() == "Subcomponent_Separator")
					writer.getServiceChars().setSubComponentSeparator(ch);
				else if(n.getName() == "Repetition_Separator")
					writer.getServiceChars().setRepetitionSeparator(ch);
				else if(n.getName() == "Segment_Terminator")
					writer.getServiceChars().setSegmentTerminator(ch);
				else if(n.getName() == "Decimal_Notation")
					writer.getServiceChars().setDecimalSeparator(ch);
				else if(n.getName() == "Escape_Character")
					writer.getServiceChars().setReleaseCharacter(ch);
				else
					throw new com.altova.AltovaException ("Settings option '" + n.getName() + "' is not recognized.");
			}
			sError = writer.getValidator().validateSettings(writer.getServiceChars());
			if (sError.length() > 0)
				throw new com.altova.AltovaException (sError);
		}
		writer.writeUNA();
	}
}
