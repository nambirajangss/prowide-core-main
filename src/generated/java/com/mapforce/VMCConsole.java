/**
 * VMCConsole.java
 *
 * This file was generated by MapForce 2025r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */


package com.mapforce;

import com.altova.types.*;


public class VMCConsole {

	public static void main(String[] args) {
		System.err.println("VMC Application");


		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToMT103_REMIT_STP_pacs008 MappingMapToMT103_REMIT_STP_pacs008Object = new MappingMapToMT103_REMIT_STP_pacs008();




			MappingMapToMT103_REMIT_STP_pacs008Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT103_REMIT_STP_pacs008Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV52Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT103/MT_103_MSG0_JSON.json");
			com.altova.io.Output MT103_REMIT_STP_pacs008Target = new com.altova.io.FileOutput("issettled-apphdr-pacs008.xml");

			try {
				MappingMapToMT103_REMIT_STP_pacs008Object.run(
					MasterFieldsV52Source,
						MT103_REMIT_STP_pacs008Target);

			} finally {
				(MasterFieldsV52Source).close();
				MT103_REMIT_STP_pacs008Target.close();
			}

		} finally {
		}


		try {
			MappingMapToresult MappingMapToresultObject = new MappingMapToresult();




			MappingMapToresultObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresultObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV52Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT103/MT_103_MSG0_JSON.json");

			try {
				String result = MappingMapToresultObject.run(
					MasterFieldsV52Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV52Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult2 MappingMapToresult2Object = new MappingMapToresult2();




			MappingMapToresult2Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult2Object.setCloseObjectsAfterRun(false);

			

			try {
				String result = MappingMapToresult2Object.run(
					);
				System.out.print(result);

			} finally {
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToissettled_apphdr_pacs009 MappingMapToissettled_apphdr_pacs009Object = new MappingMapToissettled_apphdr_pacs009();




			MappingMapToissettled_apphdr_pacs009Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToissettled_apphdr_pacs009Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV53Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202COV/MT_202_COV_MSG1_JSON.json");
			com.altova.io.Output issettled_apphdr_pacs0092Target = new com.altova.io.FileOutput("issettled-apphdr-pacs009.xml");

			try {
				MappingMapToissettled_apphdr_pacs009Object.run(
					MasterFieldsV53Source,
						issettled_apphdr_pacs0092Target);

			} finally {
				(MasterFieldsV53Source).close();
				issettled_apphdr_pacs0092Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToresult22 MappingMapToresult22Object = new MappingMapToresult22();




			MappingMapToresult22Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult22Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult22Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult3 MappingMapToresult3Object = new MappingMapToresult3();




			MappingMapToresult3Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult3Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult3Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult32 MappingMapToresult32Object = new MappingMapToresult32();




			MappingMapToresult32Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult32Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult32Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult7 MappingMapToresult7Object = new MappingMapToresult7();




			MappingMapToresult7Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult7Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult7Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult4 MappingMapToresult4Object = new MappingMapToresult4();




			MappingMapToresult4Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult4Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult4Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToissettled_apphdr_pacs0092 MappingMapToissettled_apphdr_pacs0092Object = new MappingMapToissettled_apphdr_pacs0092();




			MappingMapToissettled_apphdr_pacs0092Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToissettled_apphdr_pacs0092Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");
			com.altova.io.Output issettled_apphdr_pacs0093Target = new com.altova.io.FileOutput("issettled-apphdr-pacs009.xml");

			try {
				MappingMapToissettled_apphdr_pacs0092Object.run(
					MasterFieldsV54Source,
						issettled_apphdr_pacs0093Target);

			} finally {
				(MasterFieldsV54Source).close();
				issettled_apphdr_pacs0093Target.close();
			}

		} finally {
		}


		try {
			MappingMapToresult6 MappingMapToresult6Object = new MappingMapToresult6();




			MappingMapToresult6Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult6Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult6Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult5 MappingMapToresult5Object = new MappingMapToresult5();




			MappingMapToresult5Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult5Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult5Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToresult8 MappingMapToresult8Object = new MappingMapToresult8();




			MappingMapToresult8Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult8Object.setCloseObjectsAfterRun(false);

			

			try {
				String result = MappingMapToresult8Object.run(
					);
				System.out.print(result);

			} finally {
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

	}
}


class TraceTargetConsole implements com.altova.TraceTarget {
	public void writeTrace(String info) {
		System.err.println(info);
	}
}
