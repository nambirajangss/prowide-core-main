/**
 * VMCFrame.java
 *
 * This file was generated by MapForce 2025r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */


package com.mapforce;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import com.altova.types.*;


public class VMCFrame extends JFrame implements com.altova.TraceTarget {
	
	JPanel			contentPane;
	TitledBorder	titledBorder1;
	Box 		jHeader = new Box(BoxLayout.X_AXIS);
	Box		jHeaderInfo = new Box(BoxLayout.Y_AXIS);
	Box 		jButtonPane = new Box(BoxLayout.X_AXIS);
	JScrollPane	jScrollPaneStructures	= new JScrollPane();
	JPanel		jPanelStructures		= new JPanel();
	JLabel		jIconLabel				= new JLabel();
	JLabel		jInfoLabel1				= new JLabel();
	JLabel		jInfoLabel2				= new JLabel();
	JLabel		jInfoLabel3				= new JLabel();
	JButton		jStartButton			= new JButton();
	JPanel		jPanel1					= new JPanel();
	JScrollPane	jTraceScrollPane		= new JScrollPane();
	JTextArea	jTraceTextArea			= new JTextArea();


	JLabel jMasterFieldsV52Label0 = new JLabel();
	JTextField jMasterFieldsV52TextField0 = new JTextField();

	JLabel jMT103_REMIT_STP_pacs008Label1 = new JLabel();
	JTextField jMT103_REMIT_STP_pacs008TextField1 = new JTextField();

	JLabel jMasterFieldsV52Label2 = new JLabel();
	JTextField jMasterFieldsV52TextField2 = new JTextField();

	JLabel jresultLabel3 = new JLabel();
	JTextField jresultTextField3 = new JTextField();

	JLabel jresult2Label4 = new JLabel();
	JTextField jresult2TextField4 = new JTextField();

	JLabel jMasterFieldsV53Label5 = new JLabel();
	JTextField jMasterFieldsV53TextField5 = new JTextField();

	JLabel jissettled_apphdr_pacs0092Label6 = new JLabel();
	JTextField jissettled_apphdr_pacs0092TextField6 = new JTextField();

	JLabel jMasterFieldsV54Label7 = new JLabel();
	JTextField jMasterFieldsV54TextField7 = new JTextField();

	JLabel jresult22Label8 = new JLabel();
	JTextField jresult22TextField8 = new JTextField();

	JLabel jMasterFieldsV54Label9 = new JLabel();
	JTextField jMasterFieldsV54TextField9 = new JTextField();

	JLabel jresult4Label10 = new JLabel();
	JTextField jresult4TextField10 = new JTextField();

	JLabel jMasterFieldsV54Label11 = new JLabel();
	JTextField jMasterFieldsV54TextField11 = new JTextField();

	JLabel jresult3Label12 = new JLabel();
	JTextField jresult3TextField12 = new JTextField();

	JLabel jMasterFieldsV54Label13 = new JLabel();
	JTextField jMasterFieldsV54TextField13 = new JTextField();

	JLabel jresult7Label14 = new JLabel();
	JTextField jresult7TextField14 = new JTextField();

	JLabel jMasterFieldsV54Label15 = new JLabel();
	JTextField jMasterFieldsV54TextField15 = new JTextField();

	JLabel jresult42Label16 = new JLabel();
	JTextField jresult42TextField16 = new JTextField();

	JLabel jMasterFieldsV54Label17 = new JLabel();
	JTextField jMasterFieldsV54TextField17 = new JTextField();

	JLabel jissettled_apphdr_pacs0093Label18 = new JLabel();
	JTextField jissettled_apphdr_pacs0093TextField18 = new JTextField();

	JLabel jMasterFieldsV54Label19 = new JLabel();
	JTextField jMasterFieldsV54TextField19 = new JTextField();

	JLabel jresult6Label20 = new JLabel();
	JTextField jresult6TextField20 = new JTextField();

	JLabel jMasterFieldsV54Label21 = new JLabel();
	JTextField jMasterFieldsV54TextField21 = new JTextField();

	JLabel jresult5Label22 = new JLabel();
	JTextField jresult5TextField22 = new JTextField();

	JLabel jresult8Label23 = new JLabel();
	JTextField jresult8TextField23 = new JTextField();


	public VMCFrame() {
		enableEvents(AWTEvent.WINDOW_EVENT_MASK);
		try {
			jbInit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void jbInit() throws Exception {
		jInfoLabel1.setText("THIS APPLICATION WAS GENERATED BY MapForce 2025r2");
		jInfoLabel2.setForeground(Color.blue);
		jInfoLabel2.setText("http://www.altova.com/mapforce");
		jInfoLabel3.setText("Please check the input and output files, and press the Start button...");
		jHeaderInfo.add(jInfoLabel1,0);
		jHeaderInfo.add(jInfoLabel2,1);
		jHeaderInfo.add(jInfoLabel3,2);
		
		jIconLabel.setIcon(new ImageIcon(VMCFrame.class.getResource("mapforce.png")));
		jIconLabel.setText("");
				
		jHeader.add(jIconLabel);
		jHeader.add(Box.createHorizontalStrut(15));
		jHeader.add(jHeaderInfo);
		jHeader.add(Box.createGlue());
		
		jStartButton.setFont(new java.awt.Font("Dialog", 0, 11));
		jStartButton.setText("Start");
		jStartButton.addActionListener(new VMCFrame_jStartButton_actionAdapter(this));
		jButtonPane.add(Box.createHorizontalStrut(5));
		jButtonPane.add(jStartButton);
		jButtonPane.add(Box.createGlue());
				
		jScrollPaneStructures.setBorder(BorderFactory.createLineBorder(Color.black));
		jScrollPaneStructures.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPaneStructures.setAutoscrolls(true);
		jPanelStructures.setLayout(null);
		fillScrollPane();
		jScrollPaneStructures.getViewport().add(jPanelStructures, null);
		
		jTraceTextArea.setBackground(Color.white);
		jTraceTextArea.setForeground(Color.black);
		jTraceTextArea.setToolTipText("");
		jTraceTextArea.setText("");
		jTraceTextArea.setRows(20);
		
		jTraceScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		jTraceScrollPane.setViewportBorder(null);
		jTraceScrollPane.setAutoscrolls(true);
		jTraceScrollPane.setBorder(BorderFactory.createLineBorder(Color.black));
		jTraceScrollPane.setDebugGraphicsOptions(0);
		jTraceScrollPane.setToolTipText("");
		jTraceScrollPane.setVerifyInputWhenFocusTarget(true);
		jTraceScrollPane.getViewport().add(jTraceTextArea, null);
		jTraceScrollPane.setPreferredSize(new Dimension(0, 200));
				
		contentPane = (JPanel)this.getContentPane();
		titledBorder1 = new TitledBorder("");
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
		this.setSize(new Dimension(603, 511));
		this.setTitle("Mapforce Application");
		contentPane.add(jHeader, 0);
		contentPane.add(jScrollPaneStructures, 1);
		contentPane.add(jButtonPane, 2);
		contentPane.add(jTraceScrollPane, 3);
	}

	protected void fillScrollPane() {

		jMT103_REMIT_STP_pacs008Label1.setText("Instance of MT103-REMIT-STP-pacs008.xsd:");
		jMT103_REMIT_STP_pacs008Label1.setBounds(new Rectangle(15, 60, 438, 23));
		jPanelStructures.add(jMT103_REMIT_STP_pacs008Label1, null);
		jMT103_REMIT_STP_pacs008TextField1.setText("issettled-apphdr-pacs008.xml");
		jMT103_REMIT_STP_pacs008TextField1.setBounds(new Rectangle(15, 85, 438, 23));
		jMT103_REMIT_STP_pacs008TextField1.setEditable(false);
		jPanelStructures.add(jMT103_REMIT_STP_pacs008TextField1, null);

		jissettled_apphdr_pacs0092Label6.setText("Instance of issettled-apphdr-pacs009.xsd:");
		jissettled_apphdr_pacs0092Label6.setBounds(new Rectangle(15, 310, 438, 23));
		jPanelStructures.add(jissettled_apphdr_pacs0092Label6, null);
		jissettled_apphdr_pacs0092TextField6.setText("issettled-apphdr-pacs009.xml");
		jissettled_apphdr_pacs0092TextField6.setBounds(new Rectangle(15, 335, 438, 23));
		jissettled_apphdr_pacs0092TextField6.setEditable(false);
		jPanelStructures.add(jissettled_apphdr_pacs0092TextField6, null);

		jissettled_apphdr_pacs0093Label18.setText("Instance of issettled-apphdr-pacs009.xsd:");
		jissettled_apphdr_pacs0093Label18.setBounds(new Rectangle(15, 910, 438, 23));
		jPanelStructures.add(jissettled_apphdr_pacs0093Label18, null);
		jissettled_apphdr_pacs0093TextField18.setText("issettled-apphdr-pacs009.xml");
		jissettled_apphdr_pacs0093TextField18.setBounds(new Rectangle(15, 935, 438, 23));
		jissettled_apphdr_pacs0093TextField18.setEditable(false);
		jPanelStructures.add(jissettled_apphdr_pacs0093TextField18, null);

		jPanelStructures.setLayout(null);
		jPanelStructures.setPreferredSize(new Dimension(1185, 500));
		jPanelStructures.setSize(new Dimension(1185, 500));
		jPanelStructures.setMinimumSize(new Dimension(1185, 500));
		jPanelStructures.setMaximumSize(new Dimension(1185, 500));
	}

	protected void processWindowEvent(WindowEvent e) {
		super.processWindowEvent(e);
		if (e.getID() == WindowEvent.WINDOW_CLOSING) {
			System.exit(0);
		}
	}

	void jStartButton_actionPerformed(ActionEvent e) {
		if (e.getSource().equals(jStartButton)) {
			jStartButton.setEnabled(false);
			jTraceTextArea.removeAll();
			jTraceTextArea.append("Started...\n");
			com.altova.TraceTarget ttc = this;


			try {

		try {
			MappingMapToMT103_REMIT_STP_pacs008 MappingMapToMT103_REMIT_STP_pacs008Object = new MappingMapToMT103_REMIT_STP_pacs008();




			MappingMapToMT103_REMIT_STP_pacs008Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT103_REMIT_STP_pacs008Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV52Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT103/MT_103_MSG0_JSON.json");
			com.altova.io.Output MT103_REMIT_STP_pacs008Target = new com.altova.io.FileOutput("issettled-apphdr-pacs008.xml");

			try {
				MappingMapToMT103_REMIT_STP_pacs008Object.run(
					MasterFieldsV52Source,
						MT103_REMIT_STP_pacs008Target);

			} finally {
				(MasterFieldsV52Source).close();
				MT103_REMIT_STP_pacs008Target.close();
			}

		} finally {
		}


		try {
			MappingMapToresult MappingMapToresultObject = new MappingMapToresult();




			MappingMapToresultObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresultObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV52Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT103/MT_103_MSG0_JSON.json");

			try {
				String result = MappingMapToresultObject.run(
					MasterFieldsV52Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV52Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult2 MappingMapToresult2Object = new MappingMapToresult2();




			MappingMapToresult2Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult2Object.setCloseObjectsAfterRun(false);

			

			try {
				String result = MappingMapToresult2Object.run(
					);
				System.out.print(result);

			} finally {
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapToissettled_apphdr_pacs009 MappingMapToissettled_apphdr_pacs009Object = new MappingMapToissettled_apphdr_pacs009();




			MappingMapToissettled_apphdr_pacs009Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToissettled_apphdr_pacs009Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV53Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202COV/MT_202_COV_MSG1_JSON.json");
			com.altova.io.Output issettled_apphdr_pacs0092Target = new com.altova.io.FileOutput("issettled-apphdr-pacs009.xml");

			try {
				MappingMapToissettled_apphdr_pacs009Object.run(
					MasterFieldsV53Source,
						issettled_apphdr_pacs0092Target);

			} finally {
				(MasterFieldsV53Source).close();
				issettled_apphdr_pacs0092Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapToresult22 MappingMapToresult22Object = new MappingMapToresult22();




			MappingMapToresult22Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult22Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult22Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult3 MappingMapToresult3Object = new MappingMapToresult3();




			MappingMapToresult3Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult3Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult3Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult32 MappingMapToresult32Object = new MappingMapToresult32();




			MappingMapToresult32Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult32Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult32Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult7 MappingMapToresult7Object = new MappingMapToresult7();




			MappingMapToresult7Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult7Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult7Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult4 MappingMapToresult4Object = new MappingMapToresult4();




			MappingMapToresult4Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult4Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult4Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToissettled_apphdr_pacs0092 MappingMapToissettled_apphdr_pacs0092Object = new MappingMapToissettled_apphdr_pacs0092();




			MappingMapToissettled_apphdr_pacs0092Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToissettled_apphdr_pacs0092Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");
			com.altova.io.Output issettled_apphdr_pacs0093Target = new com.altova.io.FileOutput("issettled-apphdr-pacs009.xml");

			try {
				MappingMapToissettled_apphdr_pacs0092Object.run(
					MasterFieldsV54Source,
						issettled_apphdr_pacs0093Target);

			} finally {
				(MasterFieldsV54Source).close();
				issettled_apphdr_pacs0093Target.close();
			}

		} finally {
		}


		try {
			MappingMapToresult6 MappingMapToresult6Object = new MappingMapToresult6();




			MappingMapToresult6Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult6Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult6Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}


		try {
			MappingMapToresult5 MappingMapToresult5Object = new MappingMapToresult5();




			MappingMapToresult5Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult5Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MasterFieldsV54Source = com.altova.io.StreamInput.createInput("//192.168.2.203/Study Materials/MT-MX/1-TESTING/MT202/MT_202_MSG9_JSON.json");

			try {
				String result = MappingMapToresult5Object.run(
					MasterFieldsV54Source);
				System.out.print(result);

			} finally {
				(MasterFieldsV54Source).close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapToresult8 MappingMapToresult8Object = new MappingMapToresult8();




			MappingMapToresult8Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToresult8Object.setCloseObjectsAfterRun(false);

			

			try {
				String result = MappingMapToresult8Object.run(
					);
				System.out.print(result);

			} finally {
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			jStartButton.setEnabled(true);
		}
	}


	public void writeTrace(String info) {
		jTraceTextArea.append(info);
	}
}

class VMCFrame_jStartButton_actionAdapter
	implements java.awt.event.ActionListener {
	VMCFrame adaptee;

	VMCFrame_jStartButton_actionAdapter(VMCFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.jStartButton_actionPerformed(e);
	}
}

