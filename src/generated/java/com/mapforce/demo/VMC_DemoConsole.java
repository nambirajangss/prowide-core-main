/**
 * VMC_DemoConsole.java
 *
 * This file was generated by MapForce 2025.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */


package com.mapforce.demo;

import com.altova.types.*;


public class VMC_DemoConsole {

	public static void main(String[] args) {
		System.err.println("VMC-Demo Application");


		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToMT192_camt056 MappingMapToMT192_camt056Object = new MappingMapToMT192_camt056();




			MappingMapToMT192_camt056Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT192_camt056Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input camt_056_001_10_msg2Source = com.altova.io.StreamInput.createInput("MT192-camt056.xml");
			com.altova.io.Output MT192_camt0562Target = new com.altova.io.FileOutput("MT192-camt056.json");

			try {
				MappingMapToMT192_camt056Object.run(
					camt_056_001_10_msg2Source,
						MT192_camt0562Target);

			} finally {
				(camt_056_001_10_msg2Source).close();
				MT192_camt0562Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapTopacs_008_001_09_msg MappingMapTopacs_008_001_09_msgObject = new MappingMapTopacs_008_001_09_msg();




			MappingMapTopacs_008_001_09_msgObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTopacs_008_001_09_msgObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT103_pacs0082Source = com.altova.io.StreamInput.createInput("MT103-pacs008.json");
			com.altova.io.Output pacs_008_001_09_msg2Target = new com.altova.io.FileOutput("pacs.008.001.09-msg.xml");

			try {
				MappingMapTopacs_008_001_09_msgObject.run(
					MT103_pacs0082Source,
						pacs_008_001_09_msg2Target);

			} finally {
				(MT103_pacs0082Source).close();
				pacs_008_001_09_msg2Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapTocamt_056_001_10_msg MappingMapTocamt_056_001_10_msgObject = new MappingMapTocamt_056_001_10_msg();




			MappingMapTocamt_056_001_10_msgObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTocamt_056_001_10_msgObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT192_camt0563Source = com.altova.io.StreamInput.createInput("MT192-camt056.json");
			com.altova.io.Output camt_056_001_10_msg3Target = new com.altova.io.FileOutput("camt.056.001.10-msg.xml");

			try {
				MappingMapTocamt_056_001_10_msgObject.run(
					MT192_camt0563Source,
						camt_056_001_10_msg3Target);

			} finally {
				(MT192_camt0563Source).close();
				camt_056_001_10_msg3Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapTopacs_009_001_09_msg MappingMapTopacs_009_001_09_msgObject = new MappingMapTopacs_009_001_09_msg();




			MappingMapTopacs_009_001_09_msgObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTopacs_009_001_09_msgObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT202_pacs0092Source = com.altova.io.StreamInput.createInput("MT202-pacs009.json");
			com.altova.io.Output pacs_009_001_09_msg2Target = new com.altova.io.FileOutput("pacs.009.001.09-msg.xml");

			try {
				MappingMapTopacs_009_001_09_msgObject.run(
					MT202_pacs0092Source,
						pacs_009_001_09_msg2Target);

			} finally {
				(MT202_pacs0092Source).close();
				pacs_009_001_09_msg2Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapTopacs_009_001_09_msg2 MappingMapTopacs_009_001_09_msg2Object = new MappingMapTopacs_009_001_09_msg2();




			MappingMapTopacs_009_001_09_msg2Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTopacs_009_001_09_msg2Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT202COV_pacs0092Source = com.altova.io.StreamInput.createInput("MT202COV-pacs009.json");
			com.altova.io.Output pacs_009_001_09_msg3Target = new com.altova.io.FileOutput("pacs.009.001.09-msg.xml");

			try {
				MappingMapTopacs_009_001_09_msg2Object.run(
					MT202COV_pacs0092Source,
						pacs_009_001_09_msg3Target);

			} finally {
				(MT202COV_pacs0092Source).close();
				pacs_009_001_09_msg3Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToMT103_pacs008 MappingMapToMT103_pacs008Object = new MappingMapToMT103_pacs008();




			MappingMapToMT103_pacs008Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT103_pacs008Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input pacs_008_001_09_msg3Source = com.altova.io.StreamInput.createInput("MT103-pacs008.xml");
			com.altova.io.Output MT103_pacs0083Target = new com.altova.io.FileOutput("MT103.json.txt");

			try {
				MappingMapToMT103_pacs008Object.run(
					pacs_008_001_09_msg3Source,
						MT103_pacs0083Target);

			} finally {
				(pacs_008_001_09_msg3Source).close();
				MT103_pacs0083Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToMT202_pacs009 MappingMapToMT202_pacs009Object = new MappingMapToMT202_pacs009();




			MappingMapToMT202_pacs009Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT202_pacs009Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input pacs_009_001_09_msg4Source = com.altova.io.StreamInput.createInput("MT202-pacs009.xml");
			com.altova.io.Output MT202_pacs0093Target = new com.altova.io.FileOutput("MT202.json.txt");

			try {
				MappingMapToMT202_pacs009Object.run(
					pacs_009_001_09_msg4Source,
						MT202_pacs0093Target);

			} finally {
				(pacs_009_001_09_msg4Source).close();
				MT202_pacs0093Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		try { // Mapping
			TraceTargetConsole ttc = new TraceTargetConsole();


		try {
			MappingMapToMT202COV_pacs009 MappingMapToMT202COV_pacs009Object = new MappingMapToMT202COV_pacs009();




			MappingMapToMT202COV_pacs009Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT202COV_pacs009Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input pacs_009_001_09_msg5Source = com.altova.io.StreamInput.createInput("MT202COV-pacs009.xml");
			com.altova.io.Output MT202COV_pacs0093Target = new com.altova.io.FileOutput("MT202COV.json.txt");

			try {
				MappingMapToMT202COV_pacs009Object.run(
					pacs_009_001_09_msg5Source,
						MT202COV_pacs0093Target);

			} finally {
				(pacs_009_001_09_msg5Source).close();
				MT202COV_pacs0093Target.close();
			}

		} finally {
		}



			System.err.println("Finished");
		} catch (com.altova.UserException ue) {
			System.err.print("USER EXCEPTION:");
			System.err.println( ue.getMessage() );
			System.exit(1);
		} catch (com.altova.AltovaException e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			if (e.getInnerException() != null) {
				System.err.print("Inner exception: ");
				System.err.println(e.getInnerException().getMessage());
				if (e.getInnerException().getCause() != null) {
					System.err.print("Cause: ");
					System.err.println(e.getInnerException().getCause().getMessage());
				}
			}
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

		catch (Exception e) {
			System.err.print("ERROR: ");
			System.err.println( e.getMessage() );
			System.err.println("\nStack Trace: ");
			e.printStackTrace();
			System.exit(1);
		}

	}
}


class TraceTargetConsole implements com.altova.TraceTarget {
	public void writeTrace(String info) {
		System.err.println(info);
	}
}
