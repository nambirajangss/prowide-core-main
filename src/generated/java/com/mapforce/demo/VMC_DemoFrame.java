/**
 * VMC_DemoFrame.java
 *
 * This file was generated by MapForce 2025.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */


package com.mapforce.demo;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import com.altova.types.*;


public class VMC_DemoFrame extends JFrame implements com.altova.TraceTarget {
	
	JPanel			contentPane;
	TitledBorder	titledBorder1;
	Box 		jHeader = new Box(BoxLayout.X_AXIS);
	Box		jHeaderInfo = new Box(BoxLayout.Y_AXIS);
	Box 		jButtonPane = new Box(BoxLayout.X_AXIS);
	JScrollPane	jScrollPaneStructures	= new JScrollPane();
	JPanel		jPanelStructures		= new JPanel();
	JLabel		jIconLabel				= new JLabel();
	JLabel		jInfoLabel1				= new JLabel();
	JLabel		jInfoLabel2				= new JLabel();
	JLabel		jInfoLabel3				= new JLabel();
	JButton		jStartButton			= new JButton();
	JPanel		jPanel1					= new JPanel();
	JScrollPane	jTraceScrollPane		= new JScrollPane();
	JTextArea	jTraceTextArea			= new JTextArea();


	JLabel jcamt_056_001_10_msg2Label0 = new JLabel();
	JTextField jcamt_056_001_10_msg2TextField0 = new JTextField();

	JLabel jMT192_camt0562Label1 = new JLabel();
	JTextField jMT192_camt0562TextField1 = new JTextField();

	JLabel jMT103_pacs0082Label2 = new JLabel();
	JTextField jMT103_pacs0082TextField2 = new JTextField();

	JLabel jpacs_008_001_09_msg2Label3 = new JLabel();
	JTextField jpacs_008_001_09_msg2TextField3 = new JTextField();

	JLabel jMT192_camt0563Label4 = new JLabel();
	JTextField jMT192_camt0563TextField4 = new JTextField();

	JLabel jcamt_056_001_10_msg3Label5 = new JLabel();
	JTextField jcamt_056_001_10_msg3TextField5 = new JTextField();

	JLabel jMT202_pacs0092Label6 = new JLabel();
	JTextField jMT202_pacs0092TextField6 = new JTextField();

	JLabel jpacs_009_001_09_msg2Label7 = new JLabel();
	JTextField jpacs_009_001_09_msg2TextField7 = new JTextField();

	JLabel jMT202COV_pacs0092Label8 = new JLabel();
	JTextField jMT202COV_pacs0092TextField8 = new JTextField();

	JLabel jpacs_009_001_09_msg3Label9 = new JLabel();
	JTextField jpacs_009_001_09_msg3TextField9 = new JTextField();

	JLabel jpacs_008_001_09_msg3Label10 = new JLabel();
	JTextField jpacs_008_001_09_msg3TextField10 = new JTextField();

	JLabel jMT103_pacs0083Label11 = new JLabel();
	JTextField jMT103_pacs0083TextField11 = new JTextField();

	JLabel jpacs_009_001_09_msg4Label12 = new JLabel();
	JTextField jpacs_009_001_09_msg4TextField12 = new JTextField();

	JLabel jMT202_pacs0093Label13 = new JLabel();
	JTextField jMT202_pacs0093TextField13 = new JTextField();

	JLabel jpacs_009_001_09_msg5Label14 = new JLabel();
	JTextField jpacs_009_001_09_msg5TextField14 = new JTextField();

	JLabel jMT202COV_pacs0093Label15 = new JLabel();
	JTextField jMT202COV_pacs0093TextField15 = new JTextField();


	public VMC_DemoFrame() {
		enableEvents(AWTEvent.WINDOW_EVENT_MASK);
		try {
			jbInit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void jbInit() throws Exception {
		jInfoLabel1.setText("THIS APPLICATION WAS GENERATED BY MapForce 2025");
		jInfoLabel2.setForeground(Color.blue);
		jInfoLabel2.setText("http://www.altova.com/mapforce");
		jInfoLabel3.setText("Please check the input and output files, and press the Start button...");
		jHeaderInfo.add(jInfoLabel1,0);
		jHeaderInfo.add(jInfoLabel2,1);
		jHeaderInfo.add(jInfoLabel3,2);
		
		jIconLabel.setIcon(new ImageIcon(VMC_DemoFrame.class.getResource("mapforce.png")));
		jIconLabel.setText("");
				
		jHeader.add(jIconLabel);
		jHeader.add(Box.createHorizontalStrut(15));
		jHeader.add(jHeaderInfo);
		jHeader.add(Box.createGlue());
		
		jStartButton.setFont(new java.awt.Font("Dialog", 0, 11));
		jStartButton.setText("Start");
		jStartButton.addActionListener(new VMC_DemoFrame_jStartButton_actionAdapter(this));
		jButtonPane.add(Box.createHorizontalStrut(5));
		jButtonPane.add(jStartButton);
		jButtonPane.add(Box.createGlue());
				
		jScrollPaneStructures.setBorder(BorderFactory.createLineBorder(Color.black));
		jScrollPaneStructures.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPaneStructures.setAutoscrolls(true);
		jPanelStructures.setLayout(null);
		fillScrollPane();
		jScrollPaneStructures.getViewport().add(jPanelStructures, null);
		
		jTraceTextArea.setBackground(Color.white);
		jTraceTextArea.setForeground(Color.black);
		jTraceTextArea.setToolTipText("");
		jTraceTextArea.setText("");
		jTraceTextArea.setRows(20);
		
		jTraceScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		jTraceScrollPane.setViewportBorder(null);
		jTraceScrollPane.setAutoscrolls(true);
		jTraceScrollPane.setBorder(BorderFactory.createLineBorder(Color.black));
		jTraceScrollPane.setDebugGraphicsOptions(0);
		jTraceScrollPane.setToolTipText("");
		jTraceScrollPane.setVerifyInputWhenFocusTarget(true);
		jTraceScrollPane.getViewport().add(jTraceTextArea, null);
		jTraceScrollPane.setPreferredSize(new Dimension(0, 200));
				
		contentPane = (JPanel)this.getContentPane();
		titledBorder1 = new TitledBorder("");
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
		this.setSize(new Dimension(603, 511));
		this.setTitle("Mapforce Application");
		contentPane.add(jHeader, 0);
		contentPane.add(jScrollPaneStructures, 1);
		contentPane.add(jButtonPane, 2);
		contentPane.add(jTraceScrollPane, 3);
	}

	protected void fillScrollPane() {

		jcamt_056_001_10_msg2Label0.setText("Source instance of camt.056.001.10-msg.xsd:");
		jcamt_056_001_10_msg2Label0.setBounds(new Rectangle(15, 10, 438, 23));
		jPanelStructures.add(jcamt_056_001_10_msg2Label0, null);
		jcamt_056_001_10_msg2TextField0.setText("MT192-camt056.xml");
		jcamt_056_001_10_msg2TextField0.setBounds(new Rectangle(15, 35, 438, 23));
		jcamt_056_001_10_msg2TextField0.setEditable(false);
		jPanelStructures.add(jcamt_056_001_10_msg2TextField0, null);

		jpacs_008_001_09_msg2Label3.setText("Instance of pacs.008.001.09-msg.xsd:");
		jpacs_008_001_09_msg2Label3.setBounds(new Rectangle(15, 160, 438, 23));
		jPanelStructures.add(jpacs_008_001_09_msg2Label3, null);
		jpacs_008_001_09_msg2TextField3.setText("pacs.008.001.09-msg.xml");
		jpacs_008_001_09_msg2TextField3.setBounds(new Rectangle(15, 185, 438, 23));
		jpacs_008_001_09_msg2TextField3.setEditable(false);
		jPanelStructures.add(jpacs_008_001_09_msg2TextField3, null);

		jcamt_056_001_10_msg3Label5.setText("Instance of camt.056.001.10-msg.xsd:");
		jcamt_056_001_10_msg3Label5.setBounds(new Rectangle(15, 260, 438, 23));
		jPanelStructures.add(jcamt_056_001_10_msg3Label5, null);
		jcamt_056_001_10_msg3TextField5.setText("camt.056.001.10-msg.xml");
		jcamt_056_001_10_msg3TextField5.setBounds(new Rectangle(15, 285, 438, 23));
		jcamt_056_001_10_msg3TextField5.setEditable(false);
		jPanelStructures.add(jcamt_056_001_10_msg3TextField5, null);

		jpacs_009_001_09_msg2Label7.setText("Instance of pacs.009.001.09-msg.xsd:");
		jpacs_009_001_09_msg2Label7.setBounds(new Rectangle(15, 360, 438, 23));
		jPanelStructures.add(jpacs_009_001_09_msg2Label7, null);
		jpacs_009_001_09_msg2TextField7.setText("pacs.009.001.09-msg.xml");
		jpacs_009_001_09_msg2TextField7.setBounds(new Rectangle(15, 385, 438, 23));
		jpacs_009_001_09_msg2TextField7.setEditable(false);
		jPanelStructures.add(jpacs_009_001_09_msg2TextField7, null);

		jpacs_009_001_09_msg3Label9.setText("Instance of pacs.009.001.09-msg.xsd:");
		jpacs_009_001_09_msg3Label9.setBounds(new Rectangle(15, 460, 438, 23));
		jPanelStructures.add(jpacs_009_001_09_msg3Label9, null);
		jpacs_009_001_09_msg3TextField9.setText("pacs.009.001.09-msg.xml");
		jpacs_009_001_09_msg3TextField9.setBounds(new Rectangle(15, 485, 438, 23));
		jpacs_009_001_09_msg3TextField9.setEditable(false);
		jPanelStructures.add(jpacs_009_001_09_msg3TextField9, null);

		jpacs_008_001_09_msg3Label10.setText("Source instance of pacs.008.001.09-msg.xsd:");
		jpacs_008_001_09_msg3Label10.setBounds(new Rectangle(15, 510, 438, 23));
		jPanelStructures.add(jpacs_008_001_09_msg3Label10, null);
		jpacs_008_001_09_msg3TextField10.setText("MT103-pacs008.xml");
		jpacs_008_001_09_msg3TextField10.setBounds(new Rectangle(15, 535, 438, 23));
		jpacs_008_001_09_msg3TextField10.setEditable(false);
		jPanelStructures.add(jpacs_008_001_09_msg3TextField10, null);

		jpacs_009_001_09_msg4Label12.setText("Source instance of pacs.009.001.09-msg.xsd:");
		jpacs_009_001_09_msg4Label12.setBounds(new Rectangle(15, 610, 438, 23));
		jPanelStructures.add(jpacs_009_001_09_msg4Label12, null);
		jpacs_009_001_09_msg4TextField12.setText("MT202-pacs009.xml");
		jpacs_009_001_09_msg4TextField12.setBounds(new Rectangle(15, 635, 438, 23));
		jpacs_009_001_09_msg4TextField12.setEditable(false);
		jPanelStructures.add(jpacs_009_001_09_msg4TextField12, null);

		jpacs_009_001_09_msg5Label14.setText("Source instance of pacs.009.001.09-msg.xsd:");
		jpacs_009_001_09_msg5Label14.setBounds(new Rectangle(15, 710, 438, 23));
		jPanelStructures.add(jpacs_009_001_09_msg5Label14, null);
		jpacs_009_001_09_msg5TextField14.setText("MT202COV-pacs009.xml");
		jpacs_009_001_09_msg5TextField14.setBounds(new Rectangle(15, 735, 438, 23));
		jpacs_009_001_09_msg5TextField14.setEditable(false);
		jPanelStructures.add(jpacs_009_001_09_msg5TextField14, null);

		jPanelStructures.setLayout(null);
		jPanelStructures.setPreferredSize(new Dimension(785, 500));
		jPanelStructures.setSize(new Dimension(785, 500));
		jPanelStructures.setMinimumSize(new Dimension(785, 500));
		jPanelStructures.setMaximumSize(new Dimension(785, 500));
	}

	protected void processWindowEvent(WindowEvent e) {
		super.processWindowEvent(e);
		if (e.getID() == WindowEvent.WINDOW_CLOSING) {
			System.exit(0);
		}
	}

	void jStartButton_actionPerformed(ActionEvent e) {
		if (e.getSource().equals(jStartButton)) {
			jStartButton.setEnabled(false);
			jTraceTextArea.removeAll();
			jTraceTextArea.append("Started...\n");
			com.altova.TraceTarget ttc = this;


			try {

		try {
			MappingMapToMT192_camt056 MappingMapToMT192_camt056Object = new MappingMapToMT192_camt056();




			MappingMapToMT192_camt056Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT192_camt056Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input camt_056_001_10_msg2Source = com.altova.io.StreamInput.createInput("MT192-camt056.xml");
			com.altova.io.Output MT192_camt0562Target = new com.altova.io.FileOutput("MT192-camt056.json");

			try {
				MappingMapToMT192_camt056Object.run(
					camt_056_001_10_msg2Source,
						MT192_camt0562Target);

			} finally {
				(camt_056_001_10_msg2Source).close();
				MT192_camt0562Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapTopacs_008_001_09_msg MappingMapTopacs_008_001_09_msgObject = new MappingMapTopacs_008_001_09_msg();




			MappingMapTopacs_008_001_09_msgObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTopacs_008_001_09_msgObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT103_pacs0082Source = com.altova.io.StreamInput.createInput("MT103-pacs008.json");
			com.altova.io.Output pacs_008_001_09_msg2Target = new com.altova.io.FileOutput("pacs.008.001.09-msg.xml");

			try {
				MappingMapTopacs_008_001_09_msgObject.run(
					MT103_pacs0082Source,
						pacs_008_001_09_msg2Target);

			} finally {
				(MT103_pacs0082Source).close();
				pacs_008_001_09_msg2Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapTocamt_056_001_10_msg MappingMapTocamt_056_001_10_msgObject = new MappingMapTocamt_056_001_10_msg();




			MappingMapTocamt_056_001_10_msgObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTocamt_056_001_10_msgObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT192_camt0563Source = com.altova.io.StreamInput.createInput("MT192-camt056.json");
			com.altova.io.Output camt_056_001_10_msg3Target = new com.altova.io.FileOutput("camt.056.001.10-msg.xml");

			try {
				MappingMapTocamt_056_001_10_msgObject.run(
					MT192_camt0563Source,
						camt_056_001_10_msg3Target);

			} finally {
				(MT192_camt0563Source).close();
				camt_056_001_10_msg3Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapTopacs_009_001_09_msg MappingMapTopacs_009_001_09_msgObject = new MappingMapTopacs_009_001_09_msg();




			MappingMapTopacs_009_001_09_msgObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTopacs_009_001_09_msgObject.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT202_pacs0092Source = com.altova.io.StreamInput.createInput("MT202-pacs009.json");
			com.altova.io.Output pacs_009_001_09_msg2Target = new com.altova.io.FileOutput("pacs.009.001.09-msg.xml");

			try {
				MappingMapTopacs_009_001_09_msgObject.run(
					MT202_pacs0092Source,
						pacs_009_001_09_msg2Target);

			} finally {
				(MT202_pacs0092Source).close();
				pacs_009_001_09_msg2Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapTopacs_009_001_09_msg2 MappingMapTopacs_009_001_09_msg2Object = new MappingMapTopacs_009_001_09_msg2();




			MappingMapTopacs_009_001_09_msg2Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTopacs_009_001_09_msg2Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input MT202COV_pacs0092Source = com.altova.io.StreamInput.createInput("MT202COV-pacs009.json");
			com.altova.io.Output pacs_009_001_09_msg3Target = new com.altova.io.FileOutput("pacs.009.001.09-msg.xml");

			try {
				MappingMapTopacs_009_001_09_msg2Object.run(
					MT202COV_pacs0092Source,
						pacs_009_001_09_msg3Target);

			} finally {
				(MT202COV_pacs0092Source).close();
				pacs_009_001_09_msg3Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapToMT103_pacs008 MappingMapToMT103_pacs008Object = new MappingMapToMT103_pacs008();




			MappingMapToMT103_pacs008Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT103_pacs008Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input pacs_008_001_09_msg3Source = com.altova.io.StreamInput.createInput("MT103-pacs008.xml");
			com.altova.io.Output MT103_pacs0083Target = new com.altova.io.FileOutput("MT103.json.txt");

			try {
				MappingMapToMT103_pacs008Object.run(
					pacs_008_001_09_msg3Source,
						MT103_pacs0083Target);

			} finally {
				(pacs_008_001_09_msg3Source).close();
				MT103_pacs0083Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapToMT202_pacs009 MappingMapToMT202_pacs009Object = new MappingMapToMT202_pacs009();




			MappingMapToMT202_pacs009Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT202_pacs009Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input pacs_009_001_09_msg4Source = com.altova.io.StreamInput.createInput("MT202-pacs009.xml");
			com.altova.io.Output MT202_pacs0093Target = new com.altova.io.FileOutput("MT202.json.txt");

			try {
				MappingMapToMT202_pacs009Object.run(
					pacs_009_001_09_msg4Source,
						MT202_pacs0093Target);

			} finally {
				(pacs_009_001_09_msg4Source).close();
				MT202_pacs0093Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

		try {
			MappingMapToMT202COV_pacs009 MappingMapToMT202COV_pacs009Object = new MappingMapToMT202COV_pacs009();




			MappingMapToMT202COV_pacs009Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, JSON, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, JSON, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML, JSON and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML, JSON and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapToMT202COV_pacs009Object.setCloseObjectsAfterRun(false);

			
			com.altova.io.Input pacs_009_001_09_msg5Source = com.altova.io.StreamInput.createInput("MT202COV-pacs009.xml");
			com.altova.io.Output MT202COV_pacs0093Target = new com.altova.io.FileOutput("MT202COV.json.txt");

			try {
				MappingMapToMT202COV_pacs009Object.run(
					pacs_009_001_09_msg5Source,
						MT202COV_pacs0093Target);

			} finally {
				(pacs_009_001_09_msg5Source).close();
				MT202COV_pacs0093Target.close();
			}

		} finally {
		}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			jStartButton.setEnabled(true);
		}
	}


	public void writeTrace(String info) {
		jTraceTextArea.append(info);
	}
}

class VMC_DemoFrame_jStartButton_actionAdapter
	implements java.awt.event.ActionListener {
	VMC_DemoFrame adaptee;

	VMC_DemoFrame_jStartButton_actionAdapter(VMC_DemoFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.jStartButton_actionPerformed(e);
	}
}

